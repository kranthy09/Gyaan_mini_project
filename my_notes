Feed:
	Activity one line Description
	difference between solution and comment
Review Page:
	What is Review Request...
	comment and reply relation between author and domain expert
	what is only visible to author and admin, is it in home page or in review page?

Domain Page:
	what we have to show in :
		Your Pendings
		Pending For review
		Requests

Home Page: 
	On click on userpic how user details are shown.
	what happens when we click all domains.

how the admin and user will be differentiatied.
password is non sharable how can it easily send throught request body, is there a way to send password in a protected way.

for each post, how many number of solutions?

is there any action need to be done when logout button is clicked


pip install --upgrade django==2.2.1


----------------------------------------------------------------------------------------



user_details: {
	user_id: int,
	user_name: str,
	name: str,
	profile_pic: str,
	role: str
}
user_domains: [
	{
	  domain_id: int,
	  domain_name: str,
	}
]
suggested_domains: [
	{
	  domain_id: int,
	  domain_name: str
	}
]
user_domains_posts:[
	domains:{
		domain_id: int,
		domain_name: int
		count: int
	},
	total_posts: int
]

user_pending_domain_posts: [
	domains:{
		domain_id: int,
		domain_name: int
		count: int
	},
	total_pending_posts_posts: int
]


"parameters":[
                    {
                        "name":"offset",
                        "in":"query",
                        "required":true,
                        "description":"offset for posts",
                        "type":"integer"
                    },
                    {
                        "name":"limit",
                        "in":"query",
                        "required":true,
                        "description":"limit for posts",
                        "type":"integer"
                    }
                ],
                
                
list_of_all_posts: [
	{
		post_id: int,
		post_content: str,
		posted_by: {
			#user_details#
		},
		posted_at: date-time,
		post_tags:[
			tag_id: int,
			tag_name: str
		],
		post_reactions: {
			reactions_count: int,
			reacted_by: [
				{
					"user_details"
				}
			]
		},
		post_comments : {
			comments: [{
				comment_id: int,
				comment_content: str,
				commented_by: {
					#user_details#
				},
				commented_at: date-time,
				replies: []
			}],
			comments_count: int
		},
		post_answer: {
			answer_id: int,
			answer_content: string,
			answered_by: {
				#user_details#
			},
			answered_at: date-time,
			approved_by: {
				user_id: int,
				name: str,
				domain_name: str
			}
		}
	}
]




# Home Page

/get/user/domains/:
	
request body: user_id

validations: 
	validate user_id
	no request body to do furthur validations

TODO: Getting user details
TODO: Getting all doamins with user following and unfollowing
TODO: Getting user domains approved posts and pending posts
TODO: Getting Domain requests for domain expert and admin
TODO: Getting Domain expert pendings which has to be approved req by user


1) getting user details

	get user details dto from user_app using services
		
		:write user details interactor in user app fetching details required
		
		:create a service to call that interface for user details
		
2) Getting all doamins with user following and unfollowing
	
	get user following domains
	get user all domains
	get user not following domains, by condition

3) Getting user domains approved posts and pending posts
	
	from user_following_domains get user posts with post approved and pending
	
	DomainPostsWithStatus(
		domain_id: int,
		domain_name: string,
		post_id: int,
		is_approved: bool
	)
	
	for domain_post in domain_posts_with_status:
		domain_post_is_approved = domain_post.is_approved
		if domain_post_is_approved:
			
	
	
	


	
		
	


On Progress:
	
		
		

Done:
	1) getting user details
		:with writing get_user_details_dto_interactor
			--did not validate user_ids
		
		:create a interface in user_app to enable the communication
		-- not writing factories after defining models
		? what is class meta:..
		when writing factories, for datetime field we user LazyFunction
			with datetime.now to fill the datetime field
	
	2) Getting all doamins with user following and unfollowing:
		:get user following domains
			input: user_id
			>kg: how to create a instance of class within its method

		:get user not following domains, by condition
	

get_user_domains_interactor:

TODO: get_user_details
TODO: get_user_following_domains
TODO: get_user_suggested_domains
TODO: get_user_posts_with_domains
TODO: get_user_pending_posts_with_domains
TODO: get_domain_requests
TODO: get_domain_expert_approval_posts_with_domains




On Progress:
	TODO: get_user_posts_with_domains
		: 



Done:
	TODO: get_user_details
	TODO: get_user_following_domains
	TODO: get_user_suggested_domains





models:

	Domain(models.model):
		domain_id:
		domain_name:
		domain_description:
	
	DomainExperts(models.model):
		domain_id : ForiegnKey(Domain)
		domain_expert_id:
		
	DomainRequests(models.model):
		domain_id:
		requested_by:
		is_approved:

	DomainPost(models.model):
		user_id:
		post_id:
		domain_id:
		is_approved:

	DomainTag(models.Model):
		domain_id: ForiegnKey
		tag_id:
		

	
	
	
	domain contains tags
	domain contains domain_experts
	domain contains follow, unfollow
		

get user home page interactor :

	validate offset and limit (done)
		k_gap: how to write snapshot tests for interactors
		
	get user following domain ids(done)
	    mistake: while calling,
	    get_user_following_domains_interactor
	    did not passed user_id as argument in the interactor


	from user following domain ids get approved post ids
	in that particular domains (done)
	    mistake: not being concious when passing argments


	send these post ids to get posts interactor.

		
		from post ids get post dto
		from post ids get post tags
		get post comments
		replies to that comment
		get post reactions count and users details
		get post answer and the answer approved user details
		get user details who posted.
		get total posts count
		


post models:

	post contains tags
	post contains comments
	post contains reactions
	post contains user
	post has to be approved
	comment contains reply























no clean_architecture
no database_submissions

pycharm commands: 
	ctl + B for definition root(find declarations)
	ctl + N for searching a file or class or definition
	ctl + E for recent files

building the 
